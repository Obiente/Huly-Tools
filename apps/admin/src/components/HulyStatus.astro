---

const { status, variant } = Astro.props;

const getVariantFromStatus = (status) => {
  const lowerStatus = status.toLowerCase();
  if (lowerStatus.includes('completed') || lowerStatus.includes('done')) return 'positive';
  if (lowerStatus.includes('progress') || lowerStatus.includes('active')) return 'warning';
  if (lowerStatus.includes('blocked') || lowerStatus.includes('error')) return 'negative';
  return 'primary';
};

const finalVariant = variant || getVariantFromStatus(status);
---
<span class={`hulyStatus hulyStatus--${finalVariant}`}>
  {status}
</span>

<style>
  .hulyStatus {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    line-height: 1rem;
    border-radius: var(--small-BorderRadius, 0.375rem);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border: 1px solid transparent;
    transition: all 0.2s ease;
  }

  /* Huly Positive State (Success/Completed) - Using official Huly variables */
  .hulyStatus--positive {
    background-color: var(--theme-state-positive-background-color, rgba(5, 160, 92, 0.1));
    color: var(--theme-state-positive-color, #05A05C);
    border-color: var(--theme-state-positive-border-color, rgba(5, 160, 92, 0.15));
  }

  /* Huly Warning State (In Progress/Active) - Using official Huly variables */
  .hulyStatus--warning {
    background-color: rgba(242, 153, 74, 0.1); /* Similar to positive but for warning */
    color: var(--theme-warning-color, #f2994a);
    border-color: rgba(242, 153, 74, 0.15);
  }

  /* Huly Negative State (Blocked/Error) - Using official Huly variables */
  .hulyStatus--negative {
    background-color: var(--theme-state-negative-background-color, rgba(203, 75, 66, 0.15));
    color: var(--theme-state-negative-color, #CB4B42);
    border-color: var(--theme-state-negative-border-color, rgba(203, 75, 66, 0.15));
  }

  /* Huly Primary State (Default/Info) - Using official Huly variables */
  .hulyStatus--primary {
    background-color: var(--theme-state-primary-background-color, rgba(48, 112, 220, 0.1));
    color: var(--theme-state-primary-color, #3070dc);
    border-color: var(--theme-state-primary-border-color, rgba(48, 112, 220, 0.15));
  }

  /* Huly Regular State (Alternative neutral) - Using official Huly variables */
  .hulyStatus--regular {
    background-color: var(--theme-state-regular-background-color, rgba(123, 123, 123, 0.1));
    color: var(--theme-state-regular-color, #7b7b7b);
    border-color: var(--theme-state-regular-border-color, rgba(123, 123, 123, 0.15));
  }

  /* Huly Ghost State (Subtle/Disabled) - Using official Huly variables */
  .hulyStatus--ghost {
    background-color: var(--theme-state-ghost-background-color, rgba(123, 123, 123, 0.1));
    color: var(--theme-state-ghost-color, rgba(123, 123, 123, 0.6));
    border-color: var(--theme-state-ghost-border-color, transparent);
  }

  /* Hover effects for interactive states */
  .hulyStatus:hover {
    opacity: 0.8;
    transform: translateY(-1px);
  }

  /* Dark theme support - automatically handled by Huly CSS variables */
  .theme-dark .hulyStatus--positive {
    background-color: var(--theme-state-positive-background-color, rgba(5, 160, 92, 0.2));
  }

  .theme-dark .hulyStatus--negative {
    background-color: var(--theme-state-negative-background-color, rgba(203, 75, 66, 0.2));
  }

  .theme-dark .hulyStatus--primary {
    background-color: var(--theme-state-primary-background-color, rgba(48, 112, 220, 0.2));
  }

  .theme-dark .hulyStatus--regular {
    background-color: var(--theme-state-regular-background-color, rgba(123, 123, 123, 0.2));
  }

  .theme-dark .hulyStatus--ghost {
    background-color: var(--theme-state-ghost-background-color, rgba(123, 123, 123, 0.2));
  }
</style>
