---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import HulyTable from '../components/HulyTable.astro';
import HulyTableHeader from '../components/HulyTableHeader.astro';
import HulyTableCell from '../components/HulyTableCell.astro';
import HulyTableRowAction from '../components/HulyTableRowAction.astro';
import HulyPageTitle from '../components/HulyPageTitle.astro';
import HulyActionBar from '../components/HulyActionBar.astro';
import HulyButton from '../components/HulyButton.astro';
import HulyModal from '../components/HulyModal.astro';
import HulyFormGroup from '../components/HulyFormGroup.astro';
import HulyCheckbox from '../components/HulyCheckbox.astro';
import HulyAdminBadge from '../components/HulyAdminBadge.astro';
import HulyWorkspaceList from '../components/HulyWorkspaceList.astro';

const mockUsers = [
  { 
    id: 1, 
    name: 'Jane Doe', 
    email: 'jane@huly.io', 
    isAdmin: true,
    workspaces: ['Development', 'Marketing', 'Sales'],
    lastLogin: '2024-01-15'
  },
  { 
    id: 2, 
    name: 'John Smith', 
    email: 'john@huly.io', 
    isAdmin: false,
    workspaces: ['Development', 'QA'],
    lastLogin: '2024-01-14'
  },
  { 
    id: 3, 
    name: 'Sarah Wilson', 
    email: 'sarah@huly.io', 
    isAdmin: false,
    workspaces: ['Marketing'],
    lastLogin: '2024-01-13'
  }
];

const mockWorkspaces = [
  { id: 1, name: 'Development' },
  { id: 2, name: 'Marketing' },
  { id: 3, name: 'Sales' },
  { id: 4, name: 'QA' },
  { id: 5, name: 'Design' }
];
---

<DashboardLayout>
  <HulyPageTitle title="Users" />
  <HulyActionBar>
    <HulyButton kind="primary" label="Add User" />
  </HulyActionBar>

  <HulyTable>
    <thead>
      <tr>
        <HulyTableHeader label="Name" />
        <HulyTableHeader label="Email" />
        <HulyTableHeader label="Workspaces" />
        <HulyTableHeader label="Last Login" />
        <HulyTableHeader label="Actions" />
      </tr>
    </thead>
    <tbody>
      {mockUsers.map(user => (
        <tr>
          <HulyTableCell>
            <div class="flex items-center gap-2">
              <span class="text-white font-medium">{user.name}</span>
              <HulyAdminBadge show={user.isAdmin} />
            </div>
          </HulyTableCell>
          <HulyTableCell>{user.email}</HulyTableCell>
          <HulyTableCell>
            <span class="text-sm text-gray-300">{user.workspaces.length} workspace{user.workspaces.length !== 1 ? 's' : ''}</span>
          </HulyTableCell>
          <HulyTableCell>{user.lastLogin}</HulyTableCell>
          <HulyTableCell>
            <HulyTableRowAction label="Edit" />
            <HulyTableRowAction label="Workspaces" />
            <HulyTableRowAction label="Reset Password" />
            <HulyTableRowAction label="Delete" variant="danger" />
          </HulyTableCell>
        </tr>
      ))}
    </tbody>
  </HulyTable>

  <HulyModal id="editUserModal" title="Edit User">
    <form id="editUserForm">
      <HulyFormGroup label="Name" id="userName" name="name" required />
      <HulyFormGroup label="Email" id="userEmail" name="email" type="email" required />
      <HulyCheckbox id="userIsAdmin" name="isAdmin" label="Administrator" />
    </form>
    <Fragment slot="footer">
      <HulyButton kind="secondary" label="Cancel" onclick="document.getElementById('editUserModal').classList.remove('active'); document.body.style.overflow = '';" />
      <HulyButton kind="primary" label="Save Changes" onclick="document.getElementById('editUserForm').dispatchEvent(new Event('submit', { bubbles: true }));" />
    </Fragment>
  </HulyModal>

  <HulyModal id="workspacesModal" title="Manage Workspaces">
    <HulyWorkspaceList workspaces={mockWorkspaces} userWorkspaces={[]} />
    <Fragment slot="footer">
      <HulyButton kind="secondary" label="Cancel" onclick="document.getElementById('workspacesModal').classList.remove('active'); document.body.style.overflow = '';" />
      <HulyButton kind="primary" label="Update Workspaces" onclick="console.log('Update workspaces'); document.getElementById('workspacesModal').classList.remove('active'); document.body.style.overflow = '';" />
    </Fragment>
  </HulyModal>

  <HulyModal id="resetPasswordModal" title="Reset Password">
    <form id="resetPasswordForm">
      <HulyFormGroup label="New Password" id="newPassword" name="password" type="password" required />
      <HulyFormGroup label="Confirm Password" id="confirmPassword" name="confirmPassword" type="password" required />
      <HulyCheckbox id="forcePasswordChange" name="forceChange" label="Force password change on next login" />
    </form>
    <Fragment slot="footer">
      <HulyButton kind="secondary" label="Cancel" onclick="document.getElementById('resetPasswordModal').classList.remove('active'); document.body.style.overflow = '';" />
      <HulyButton kind="primary" label="Reset Password" onclick="document.getElementById('resetPasswordForm').dispatchEvent(new Event('submit', { bubbles: true }));" />
    </Fragment>
  </HulyModal>
</DashboardLayout>

<script is:inline>
  let currentUser = null;
  const mockUsers = [
    { id: 1, name: 'Jane Doe', email: 'jane@huly.io', isAdmin: true, workspaces: ['Development', 'Marketing', 'Sales'], lastLogin: '2024-01-15' },
    { id: 2, name: 'John Smith', email: 'john@huly.io', isAdmin: false, workspaces: ['Development', 'QA'], lastLogin: '2024-01-14' },
    { id: 3, name: 'Sarah Wilson', email: 'sarah@huly.io', isAdmin: false, workspaces: ['Marketing'], lastLogin: '2024-01-13' }
  ];

  const mockWorkspaces = [
    { id: 1, name: 'Development' }, { id: 2, name: 'Marketing' }, { id: 3, name: 'Sales' }, { id: 4, name: 'QA' }, { id: 5, name: 'Design' }
  ];

  function editUser(userId) {
    currentUser = mockUsers.find(u => u.id === userId);
    if (currentUser) {
      document.getElementById('userName').value = currentUser.name;
      document.getElementById('userEmail').value = currentUser.email;
      document.getElementById('userIsAdmin').checked = currentUser.isAdmin;
    }
  }

  function manageWorkspaces(userId) {
    currentUser = mockUsers.find(u => u.id === userId);
    if (currentUser) {
      document.querySelectorAll('#workspacesModal input[type="checkbox"]').forEach(cb => cb.checked = false);
      currentUser.workspaces.forEach(workspaceName => {
        const workspace = mockWorkspaces.find(w => w.name === workspaceName);
        if (workspace) {
          const checkbox = document.querySelector(`#workspacesModal input[value="${workspace.id}"]`);
          if (checkbox) checkbox.checked = true;
        }
      });
    }
  }

  function resetPassword(userId) {
    currentUser = mockUsers.find(u => u.id === userId);
    if (currentUser) {
      document.getElementById('newPassword').value = '';
      document.getElementById('confirmPassword').value = '';
      document.getElementById('forcePasswordChange').checked = false;
    }
  }

  function deleteUser(userId) {
    if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
      console.log('Delete user:', userId);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('table tbody tr').forEach((row, index) => {
      const userId = mockUsers[index].id;
      const actions = row.querySelectorAll('.hulyTableRowAction');
      
      if (actions[0]) actions[0].addEventListener('click', () => {
        editUser(userId);
        document.getElementById('editUserModal').classList.add('active');
        document.body.style.overflow = 'hidden';
      });
      if (actions[1]) actions[1].addEventListener('click', () => {
        manageWorkspaces(userId);
        document.getElementById('workspacesModal').classList.add('active');
        document.body.style.overflow = 'hidden';
      });
      if (actions[2]) actions[2].addEventListener('click', () => {
        resetPassword(userId);
        document.getElementById('resetPasswordModal').classList.add('active');
        document.body.style.overflow = 'hidden';
      });
      if (actions[3]) actions[3].addEventListener('click', () => deleteUser(userId));
    });

    document.querySelectorAll('.modal').forEach(modal => {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.remove('active');
          document.body.style.overflow = '';
        }
      });
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        document.querySelectorAll('.modal.active').forEach(modal => {
          modal.classList.remove('active');
          document.body.style.overflow = '';
        });
      }
    });

    document.querySelectorAll('.modal-close').forEach(btn => {
      btn.addEventListener('click', () => {
        btn.closest('.modal').classList.remove('active');
        document.body.style.overflow = '';
      });
    });

    document.querySelectorAll('button[kind="secondary"]').forEach(btn => {
      if (btn.textContent.includes('Cancel')) {
        btn.addEventListener('click', () => {
          btn.closest('.modal').classList.remove('active');
          document.body.style.overflow = '';
        });
      }
    });

    document.getElementById('editUserForm')?.addEventListener('submit', (e) => {
      e.preventDefault();
      if (currentUser) {
        console.log('Save user changes:', {
          id: currentUser.id,
          name: document.getElementById('userName').value,
          email: document.getElementById('userEmail').value,
          isAdmin: document.getElementById('userIsAdmin').checked
        });
        document.getElementById('editUserModal').classList.remove('active');
        document.body.style.overflow = '';
      }
    });

    document.getElementById('resetPasswordForm')?.addEventListener('submit', (e) => {
      e.preventDefault();
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      
      if (newPassword !== confirmPassword) {
        alert('Passwords do not match');
        return;
      }
      
      if (currentUser) {
        console.log('Reset password:', {
          userId: currentUser.id,
          forceChange: document.getElementById('forcePasswordChange').checked
        });
        document.getElementById('resetPasswordModal').classList.remove('active');
        document.body.style.overflow = '';
      }
    });
  });
</script>
