---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import HulyTable from '../components/HulyTable.astro';
import HulyTableHeader from '../components/HulyTableHeader.astro';
import HulyTableCell from '../components/HulyTableCell.astro';
import HulyTableRowAction from '../components/HulyTableRowAction.astro';
import HulyPageTitle from '../components/HulyPageTitle.astro';
import HulyActionBar from '../components/HulyActionBar.astro';
import HulyButton from '../components/HulyButton.astro';
import HulyStatus from '../components/HulyStatus.astro';

const mockUsers = [
  { 
    id: 1, 
    name: 'Jane Doe', 
    email: 'jane@huly.io', 
    isAdmin: true,
    workspaces: ['Development', 'Marketing', 'Sales'],
    lastLogin: '2024-01-15'
  },
  { 
    id: 2, 
    name: 'John Smith', 
    email: 'john@huly.io', 
    isAdmin: false,
    workspaces: ['Development', 'QA'],
    lastLogin: '2024-01-14'
  },
  { 
    id: 3, 
    name: 'Sarah Wilson', 
    email: 'sarah@huly.io', 
    isAdmin: false,
    workspaces: ['Marketing'],
    lastLogin: '2024-01-13'
  }
];

const mockWorkspaces = [
  { id: 1, name: 'Development' },
  { id: 2, name: 'Marketing' },
  { id: 3, name: 'Sales' },
  { id: 4, name: 'QA' },
  { id: 5, name: 'Design' }
];
---

<DashboardLayout>
  <HulyPageTitle title="Users" />
  <HulyActionBar>
    <HulyButton kind="primary" label="Add User" />
  </HulyActionBar>
  <HulyTable>
    <thead>
      <tr>
        <HulyTableHeader label="Name" />
        <HulyTableHeader label="Email" />
        <HulyTableHeader label="Workspaces" />
        <HulyTableHeader label="Last Login" />
        <HulyTableHeader label="Actions" />
      </tr>
    </thead>
    <tbody>
      {mockUsers.map(user => (
        <tr>
          <HulyTableCell>
            <div class="name-cell">
              <span class="user-name">{user.name}</span>
              {user.isAdmin && <span class="admin-badge">Admin</span>}
            </div>
          </HulyTableCell>
          <HulyTableCell>{user.email}</HulyTableCell>
          <HulyTableCell>
            <span class="workspace-count">{user.workspaces.length} workspace{user.workspaces.length !== 1 ? 's' : ''}</span>
          </HulyTableCell>
          <HulyTableCell>{user.lastLogin}</HulyTableCell>
          <HulyTableCell>
            <HulyTableRowAction label="Edit" />
            <HulyTableRowAction label="Workspaces" />
            <HulyTableRowAction label="Reset Password" />
            <HulyTableRowAction label="Delete" variant="danger" />
          </HulyTableCell>
        </tr>
      ))}
    </tbody>
  </HulyTable>

  <!-- Edit User Modal -->
  <div id="editUserModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Edit User</h2>
        <button class="modal-close" onclick="closeModal('editUserModal')">&times;</button>
      </div>
      <div class="modal-body">
        <form id="editUserForm">
          <div class="form-group">
            <label for="userName">Name</label>
            <input type="text" id="userName" name="name" required />
          </div>
          <div class="form-group">
            <label for="userEmail">Email</label>
            <input type="email" id="userEmail" name="email" required />
          </div>
          <div class="form-group">
            <label class="checkbox-label">
              <input type="checkbox" id="userIsAdmin" name="isAdmin" />
              <span class="checkbox-text">Administrator</span>
            </label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <HulyButton kind="secondary" label="Cancel" />
        <HulyButton kind="primary" label="Save Changes" />
      </div>
    </div>
  </div>

  <!-- Manage Workspaces Modal -->
  <div id="workspacesModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Manage Workspaces</h2>
        <button class="modal-close" onclick="closeModal('workspacesModal')">&times;</button>
      </div>
      <div class="modal-body">
        <p class="modal-description">Select workspaces this user has access to:</p>
        <div class="workspace-list">
          {mockWorkspaces.map(workspace => (
            <label class="workspace-item">
              <input type="checkbox" name="workspaces" value={workspace.id} />
              <span class="workspace-name">{workspace.name}</span>
            </label>
          ))}
        </div>
      </div>
      <div class="modal-footer">
        <HulyButton kind="secondary" label="Cancel" />
        <HulyButton kind="primary" label="Update Workspaces" />
      </div>
    </div>
  </div>

  <!-- Reset Password Modal -->
  <div id="resetPasswordModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Reset Password</h2>
        <button class="modal-close" onclick="closeModal('resetPasswordModal')">&times;</button>
      </div>
      <div class="modal-body">
        <form id="resetPasswordForm">
          <div class="form-group">
            <label for="newPassword">New Password</label>
            <input type="password" id="newPassword" name="password" required />
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required />
          </div>
          <div class="form-group">
            <label class="checkbox-label">
              <input type="checkbox" id="forcePasswordChange" name="forceChange" />
              <span class="checkbox-text">Force password change on next login</span>
            </label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <HulyButton kind="secondary" label="Cancel" />
        <HulyButton kind="primary" label="Reset Password" />
      </div>
    </div>
  </div>
</DashboardLayout>

<style>
  .name-cell {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .user-name {
    color: var(--theme-caption-color, #FFF);
    font-weight: 500;
  }

  .admin-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.125rem 0.5rem;
    background-color: var(--theme-state-positive-background-color, rgba(5, 160, 92, 0.1));
    color: var(--theme-state-positive-color, #05A05C);
    border: 1px solid var(--theme-state-positive-border-color, rgba(5, 160, 92, 0.15));
    border-radius: var(--min-BorderRadius, 0.125rem);
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .workspace-count {
    font-size: 0.875rem;
    color: var(--theme-content-color, rgba(255, 255, 255, 0.8));
  }

  /* Modal Styles */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal.active {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-content {
    background-color: var(--theme-card-color, #14141F);
    border: 1px solid var(--theme-divider-color, rgba(255, 255, 255, 0.1));
    border-radius: var(--medium-BorderRadius, 0.5rem);
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: var(--theme-card-shadow-hover, 0 6px 20px 0 rgba(0, 0, 0, 0.5));
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--theme-divider-color, rgba(255, 255, 255, 0.1));
  }

  .modal-header h2 {
    margin: 0;
    color: var(--theme-caption-color, #FFF);
    font-size: 1.25rem;
    font-weight: 600;
  }

  .modal-close {
    background: none;
    border: none;
    color: var(--theme-content-color, rgba(255, 255, 255, 0.8));
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--extra-small-BorderRadius, 0.25rem);
    transition: all 0.15s ease;
  }

  .modal-close:hover {
    background-color: var(--theme-bg-accent-color, rgba(255, 255, 255, 0.04));
    color: var(--theme-caption-color, #FFF);
  }

  .modal-body {
    padding: 1.5rem;
  }

  .modal-description {
    margin: 0 0 1rem 0;
    color: var(--theme-content-color, rgba(255, 255, 255, 0.8));
    font-size: 0.875rem;
  }

  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem;
    border-top: 1px solid var(--theme-divider-color, rgba(255, 255, 255, 0.1));
  }

  /* Form Styles */
  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--theme-caption-color, #FFF);
    font-weight: 500;
    font-size: 0.875rem;
  }

  .form-group input[type="text"],
  .form-group input[type="email"],
  .form-group input[type="password"] {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--theme-divider-color, rgba(255, 255, 255, 0.1));
    border-radius: var(--extra-small-BorderRadius, 0.25rem);
    background-color: var(--theme-bg-color, #14141F);
    color: var(--theme-content-color, rgba(255, 255, 255, 0.8));
    font-size: 0.875rem;
    transition: border-color 0.15s ease;
  }

  .form-group input[type="text"]:focus,
  .form-group input[type="email"]:focus,
  .form-group input[type="password"]:focus {
    outline: none;
    border-color: var(--primary-button-default, #2c23d5);
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
  }

  .checkbox-label input[type="checkbox"] {
    width: 1rem;
    height: 1rem;
    cursor: pointer;
  }

  .checkbox-text {
    color: var(--theme-content-color, rgba(255, 255, 255, 0.8));
    font-size: 0.875rem;
  }

  /* Workspace List Styles */
  .workspace-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .workspace-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    border: 1px solid var(--theme-divider-color, rgba(255, 255, 255, 0.1));
    border-radius: var(--extra-small-BorderRadius, 0.25rem);
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .workspace-item:hover {
    background-color: var(--theme-bg-accent-color, rgba(255, 255, 255, 0.04));
  }

  .workspace-item input[type="checkbox"] {
    width: 1rem;
    height: 1rem;
    cursor: pointer;
  }

  .workspace-name {
    color: var(--theme-content-color, rgba(255, 255, 255, 0.8));
    font-size: 0.875rem;
    font-weight: 500;
  }
</style>

<script is:inline>
  // Modal functionality
  function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
    }
  }

  function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('active');
      document.body.style.overflow = '';
    }
  }

  // User management functions
  let currentUser = null;
  
  const mockUsers = [
    { 
      id: 1, 
      name: 'Jane Doe', 
      email: 'jane@huly.io', 
      isAdmin: true,
      workspaces: ['Development', 'Marketing', 'Sales'],
      lastLogin: '2024-01-15'
    },
    { 
      id: 2, 
      name: 'John Smith', 
      email: 'john@huly.io', 
      isAdmin: false,
      workspaces: ['Development', 'QA'],
      lastLogin: '2024-01-14'
    },
    { 
      id: 3, 
      name: 'Sarah Wilson', 
      email: 'sarah@huly.io', 
      isAdmin: false,
      workspaces: ['Marketing'],
      lastLogin: '2024-01-13'
    }
  ];

  const mockWorkspaces = [
    { id: 1, name: 'Development' },
    { id: 2, name: 'Marketing' },
    { id: 3, name: 'Sales' },
    { id: 4, name: 'QA' },
    { id: 5, name: 'Design' }
  ];

  function editUser(userId) {
    currentUser = mockUsers.find(u => u.id === userId);
    if (currentUser) {
      const nameInput = document.getElementById('userName');
      const emailInput = document.getElementById('userEmail');
      const adminCheckbox = document.getElementById('userIsAdmin');
      
      if (nameInput) nameInput.value = currentUser.name;
      if (emailInput) emailInput.value = currentUser.email;
      if (adminCheckbox) adminCheckbox.checked = currentUser.isAdmin;
      
      openModal('editUserModal');
    }
  }

  function manageWorkspaces(userId) {
    currentUser = mockUsers.find(u => u.id === userId);
    if (currentUser) {
      // Clear all checkboxes first
      document.querySelectorAll('#workspacesModal input[type="checkbox"]').forEach(cb => cb.checked = false);
      
      // Check the workspaces the user has access to
      currentUser.workspaces.forEach(workspaceName => {
        const workspace = mockWorkspaces.find(w => w.name === workspaceName);
        if (workspace) {
          const checkbox = document.querySelector(`#workspacesModal input[value="${workspace.id}"]`);
          if (checkbox) checkbox.checked = true;
        }
      });
      
      openModal('workspacesModal');
    }
  }

  function resetPassword(userId) {
    currentUser = mockUsers.find(u => u.id === userId);
    if (currentUser) {
      const newPasswordInput = document.getElementById('newPassword');
      const confirmPasswordInput = document.getElementById('confirmPassword');
      const forceChangeCheckbox = document.getElementById('forcePasswordChange');
      
      if (newPasswordInput) newPasswordInput.value = '';
      if (confirmPasswordInput) confirmPasswordInput.value = '';
      if (forceChangeCheckbox) forceChangeCheckbox.checked = false;
      
      openModal('resetPasswordModal');
    }
  }

  function deleteUser(userId) {
    if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
      console.log('Delete user:', userId);
      // Handle user deletion logic here
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Close modal when clicking outside
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('modal')) {
        closeModal(e.target.id);
      }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const activeModal = document.querySelector('.modal.active');
        if (activeModal) {
          closeModal(activeModal.id);
        }
      }
    });

    // Add click handlers to table row actions
    document.querySelectorAll('table tbody tr').forEach((row, index) => {
      const userId = mockUsers[index].id;
      const actions = row.querySelectorAll('.hulyTableRowAction');
      
      if (actions[0]) actions[0].addEventListener('click', () => editUser(userId));
      if (actions[1]) actions[1].addEventListener('click', () => manageWorkspaces(userId));
      if (actions[2]) actions[2].addEventListener('click', () => resetPassword(userId));
      if (actions[3]) actions[3].addEventListener('click', () => deleteUser(userId));
    });

    // Form submission handlers
    const editUserForm = document.getElementById('editUserForm');
    const resetPasswordForm = document.getElementById('resetPasswordForm');
    
    if (editUserForm) {
      editUserForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const nameInput = document.getElementById('userName');
        const emailInput = document.getElementById('userEmail');
        const adminCheckbox = document.getElementById('userIsAdmin');
        
        if (currentUser && nameInput && emailInput && adminCheckbox) {
          console.log('Save user changes:', {
            id: currentUser.id,
            name: nameInput.value,
            email: emailInput.value,
            isAdmin: adminCheckbox.checked
          });
          closeModal('editUserModal');
        }
      });
    }
    
    if (resetPasswordForm) {
      resetPasswordForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const forceChangeCheckbox = document.getElementById('forcePasswordChange');
        
        if (newPasswordInput && confirmPasswordInput && forceChangeCheckbox) {
          const newPassword = newPasswordInput.value;
          const confirmPassword = confirmPasswordInput.value;
          
          if (newPassword !== confirmPassword) {
            alert('Passwords do not match');
            return;
          }
          
          if (currentUser) {
            console.log('Reset password:', {
              userId: currentUser.id,
              forceChange: forceChangeCheckbox.checked
            });
            closeModal('resetPasswordModal');
          }
        }
      });
    }
  });
</script>
