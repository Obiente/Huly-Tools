---
const { 
  id,
  title,
  maxWidth = '500px'
} = Astro.props;
---

<div id={id} class="modal">
  <div class="modal-content" style={`max-width: ${maxWidth}`}>
    <div class="modal-header">
      <h2>{title}</h2>
      <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
      <slot />
    </div>
    <div class="modal-footer">
      <slot name="footer" />
    </div>
  </div>
</div>

<style>
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal.active {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-content {
    background-color: var(--theme-card-color, #14141F);
    border: 1px solid var(--theme-divider-color, rgba(255, 255, 255, 0.1));
    border-radius: var(--medium-BorderRadius, 0.5rem);
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: var(--theme-card-shadow-hover, 0 6px 20px 0 rgba(0, 0, 0, 0.5));
    min-width: 400px;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--theme-divider-color, rgba(255, 255, 255, 0.1));
  }

  .modal-header h2 {
    margin: 0;
    color: var(--theme-caption-color, #FFF);
    font-size: 1.25rem;
    font-weight: 600;
  }

  .modal-close {
    background: none;
    border: none;
    color: var(--theme-content-color, rgba(255, 255, 255, 0.8));
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--extra-small-BorderRadius, 0.25rem);
    transition: all 0.15s ease;
  }

  .modal-close:hover {
    background-color: var(--theme-bg-accent-color, rgba(255, 255, 255, 0.04));
    color: var(--theme-caption-color, #FFF);
  }

  .modal-body {
    padding: 1.5rem;
  }

  .modal-footer {
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    align-items: center;
    gap: 0.75rem;
    padding: 1.5rem;
    border-top: 1px solid var(--theme-divider-color, rgba(255, 255, 255, 0.1));
    flex-wrap: nowrap;
  }

  .modal-footer :global(.hulyButton) {
    min-width: 100px;
    justify-content: center;
    flex-shrink: 0;
  }
</style>

<script is:inline>
  class ModalManager {
    static openModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
      }
    }

    static closeModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove('active');
        document.body.style.overflow = '';
      }
    }

    static init() {
      document.addEventListener('click', (e) => {
        const target = e.target;
        if (target.classList.contains('modal')) {
          this.closeModal(target.id);
        }
        if (target.hasAttribute('data-close')) {
          this.closeModal(target.getAttribute('data-close'));
        }
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          const activeModal = document.querySelector('.modal.active');
          if (activeModal) {
            this.closeModal(activeModal.id);
          }
        }
      });
    }
  }

  window.openModal = (modalId) => ModalManager.openModal(modalId);
  window.closeModal = (modalId) => ModalManager.closeModal(modalId);

  document.addEventListener('DOMContentLoaded', () => {
    ModalManager.init();
  });
</script>
